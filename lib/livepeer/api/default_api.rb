=begin
#Livepeer API Reference

#Welcome to the Livepeer API reference docs. Here you will find all the endpoints exposed on the standard Livepeer API, learn how to use them and what they return. 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module livepeer
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a multistream target
    # @param multistream_target [MultistreamTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<MultistreamTarget>]
    def create_multistream_target(multistream_target, opts = {})
      data, _status_code, _headers = create_multistream_target_with_http_info(multistream_target, opts)
      data
    end

    # Create a multistream target
    # @param multistream_target [MultistreamTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MultistreamTarget>, Integer, Hash)>] Array<MultistreamTarget> data, response status code and response headers
    def create_multistream_target_with_http_info(multistream_target, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_multistream_target ...'
      end
      # verify the required parameter 'multistream_target' is set
      if @api_client.config.client_side_validation && multistream_target.nil?
        fail ArgumentError, "Missing the required parameter 'multistream_target' when calling DefaultApi.create_multistream_target"
      end
      # resource path
      local_var_path = '/multistream/target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(multistream_target)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MultistreamTarget>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_multistream_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_multistream_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a room
    # @param [Hash] opts the optional parameters
    # @return [CreateRoomResponse]
    def create_room(opts = {})
      data, _status_code, _headers = create_room_with_http_info(opts)
      data
    end

    # Create a room
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateRoomResponse, Integer, Hash)>] CreateRoomResponse data, response status code and response headers
    def create_room_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_room ...'
      end
      # resource path
      local_var_path = '/room'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateRoomResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_room",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a room user
    # @param id [String] ID of the room
    # @param room_user_payload [RoomUserPayload] 
    # @param [Hash] opts the optional parameters
    # @return [RoomUserResponse]
    def create_room_user(id, room_user_payload, opts = {})
      data, _status_code, _headers = create_room_user_with_http_info(id, room_user_payload, opts)
      data
    end

    # Create a room user
    # @param id [String] ID of the room
    # @param room_user_payload [RoomUserPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoomUserResponse, Integer, Hash)>] RoomUserResponse data, response status code and response headers
    def create_room_user_with_http_info(id, room_user_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_room_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.create_room_user"
      end
      # verify the required parameter 'room_user_payload' is set
      if @api_client.config.client_side_validation && room_user_payload.nil?
        fail ArgumentError, "Missing the required parameter 'room_user_payload' when calling DefaultApi.create_room_user"
      end
      # resource path
      local_var_path = '/room/{id}/user'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(room_user_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'RoomUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_room_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_room_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a signing key
    # @param [Hash] opts the optional parameters
    # @return [SigningKeyResponsePayload]
    def create_signing_key(opts = {})
      data, _status_code, _headers = create_signing_key_with_http_info(opts)
      data
    end

    # Create a signing key
    # @param [Hash] opts the optional parameters
    # @return [Array<(SigningKeyResponsePayload, Integer, Hash)>] SigningKeyResponsePayload data, response status code and response headers
    def create_signing_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_signing_key ...'
      end
      # resource path
      local_var_path = '/access-control/signing-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SigningKeyResponsePayload'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_signing_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_signing_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a stream
    # @param new_stream_payload [NewStreamPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Stream>]
    def create_stream(new_stream_payload, opts = {})
      data, _status_code, _headers = create_stream_with_http_info(new_stream_payload, opts)
      data
    end

    # Create a stream
    # @param new_stream_payload [NewStreamPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Stream>, Integer, Hash)>] Array<Stream> data, response status code and response headers
    def create_stream_with_http_info(new_stream_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_stream ...'
      end
      # verify the required parameter 'new_stream_payload' is set
      if @api_client.config.client_side_validation && new_stream_payload.nil?
        fail ArgumentError, "Missing the required parameter 'new_stream_payload' when calling DefaultApi.create_stream"
      end
      # resource path
      local_var_path = '/stream'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_stream_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Stream>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_stream",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a webhook
    # @param [Hash] opts the optional parameters
    # @return [Webhook]
    def create_webhook(opts = {})
      data, _status_code, _headers = create_webhook_with_http_info(opts)
      data
    end

    # Create a webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<(Webhook, Integer, Hash)>] Webhook data, response status code and response headers
    def create_webhook_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_webhook ...'
      end
      # resource path
      local_var_path = '/webhook'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Webhook'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an asset
    # @param asset_id [String] ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_asset(asset_id, opts = {})
      delete_asset_with_http_info(asset_id, opts)
      nil
    end

    # Delete an asset
    # @param asset_id [String] ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_asset_with_http_info(asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_asset ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.delete_asset"
      end
      # resource path
      local_var_path = '/asset/{assetId}'.sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_asset",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a multistream target
    # @param id [String] ID of the multistream target
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_multistream_target(id, opts = {})
      delete_multistream_target_with_http_info(id, opts)
      nil
    end

    # Delete a multistream target
    # @param id [String] ID of the multistream target
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_multistream_target_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_multistream_target ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_multistream_target"
      end
      # resource path
      local_var_path = '/multistream/target/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_multistream_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_multistream_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a room
    # @param id [String] ID of the room
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_room(id, opts = {})
      delete_room_with_http_info(id, opts)
      nil
    end

    # Delete a room
    # @param id [String] ID of the room
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_room_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_room ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_room"
      end
      # resource path
      local_var_path = '/room/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_room",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from the room
    # @param id [String] ID of the room
    # @param user_id [String] ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_room_user(id, user_id, opts = {})
      delete_room_user_with_http_info(id, user_id, opts)
      nil
    end

    # Remove a user from the room
    # @param id [String] ID of the room
    # @param user_id [String] ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_room_user_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_room_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_room_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.delete_room_user"
      end
      # resource path
      local_var_path = '/room/{id}/user/{userId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_room_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_room_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Signing Key
    # @param key_id [String] ID of the signing key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signing_key(key_id, opts = {})
      delete_signing_key_with_http_info(key_id, opts)
      nil
    end

    # Delete Signing Key
    # @param key_id [String] ID of the signing key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signing_key_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_signing_key ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling DefaultApi.delete_signing_key"
      end
      # resource path
      local_var_path = '/access-control/signing-key/{keyId}'.sub('{' + 'keyId' + '}', CGI.escape(key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_signing_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_signing_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a stream
    # @param id [String] ID of the stream
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_stream(id, opts = {})
      delete_stream_with_http_info(id, opts)
      nil
    end

    # Delete a stream
    # @param id [String] ID of the stream
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_stream_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_stream ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_stream"
      end
      # resource path
      local_var_path = '/stream/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_stream",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a webhook
    # @param id [String] ID of the webhook
    # @param [Hash] opts the optional parameters
    # @return [Webhook]
    def delete_webhook(id, opts = {})
      data, _status_code, _headers = delete_webhook_with_http_info(id, opts)
      data
    end

    # Delete a webhook
    # @param id [String] ID of the webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<(Webhook, Integer, Hash)>] Webhook data, response status code and response headers
    def delete_webhook_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_webhook ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_webhook"
      end
      # resource path
      local_var_path = '/webhook/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Webhook'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves an asset
    # @param asset_id [String] ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [Asset]
    def get_asset(asset_id, opts = {})
      data, _status_code, _headers = get_asset_with_http_info(asset_id, opts)
      data
    end

    # Retrieves an asset
    # @param asset_id [String] ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [Array<(Asset, Integer, Hash)>] Asset data, response status code and response headers
    def get_asset_with_http_info(asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_asset ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.get_asset"
      end
      # resource path
      local_var_path = '/asset/{assetId}'.sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Asset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_asset",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve assets
    # @param [Hash] opts the optional parameters
    # @return [Array<Asset>]
    def get_assets(opts = {})
      data, _status_code, _headers = get_assets_with_http_info(opts)
      data
    end

    # Retrieve assets
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Asset>, Integer, Hash)>] Array<Asset> data, response status code and response headers
    def get_assets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_assets ...'
      end
      # resource path
      local_var_path = '/asset'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Asset>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_assets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query creator viewership metrics
    # @param [Hash] opts the optional parameters
    # @option opts [GetViewershipsMetricsFromParameter] :from Start timestamp for the query range (inclusive)
    # @option opts [GetViewershipsMetricsFromParameter] :to End timestamp for the query range (exclusive)
    # @option opts [String] :time_step The time step to aggregate viewership metrics by
    # @option opts [String] :asset_id The asset ID to filter metrics for
    # @option opts [String] :stream_id The stream ID to filter metrics for
    # @option opts [String] :creator_id The creator ID to filter the query results
    # @option opts [Array<String>] :breakdown_by The list of fields to break down the query results. Specify this query-string multiple times to break down by multiple fields. 
    # @return [Array<ViewershipMetric>]
    def get_creator_metrics(opts = {})
      data, _status_code, _headers = get_creator_metrics_with_http_info(opts)
      data
    end

    # Query creator viewership metrics
    # @param [Hash] opts the optional parameters
    # @option opts [GetViewershipsMetricsFromParameter] :from Start timestamp for the query range (inclusive)
    # @option opts [GetViewershipsMetricsFromParameter] :to End timestamp for the query range (exclusive)
    # @option opts [String] :time_step The time step to aggregate viewership metrics by
    # @option opts [String] :asset_id The asset ID to filter metrics for
    # @option opts [String] :stream_id The stream ID to filter metrics for
    # @option opts [String] :creator_id The creator ID to filter the query results
    # @option opts [Array<String>] :breakdown_by The list of fields to break down the query results. Specify this query-string multiple times to break down by multiple fields. 
    # @return [Array<(Array<ViewershipMetric>, Integer, Hash)>] Array<ViewershipMetric> data, response status code and response headers
    def get_creator_metrics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_creator_metrics ...'
      end
      allowable_values = ["hour", "day", "week", "month", "year"]
      if @api_client.config.client_side_validation && opts[:'time_step'] && !allowable_values.include?(opts[:'time_step'])
        fail ArgumentError, "invalid value for \"time_step\", must be one of #{allowable_values}"
      end
      allowable_values = ["deviceType", "device", "cpu", "os", "browser", "browserEngine", "continent", "country", "subdivision", "timezone", "viewerId"]
      if @api_client.config.client_side_validation && opts[:'breakdown_by'] && !opts[:'breakdown_by'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"breakdown_by\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/data/views/query/creator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'timeStep'] = opts[:'time_step'] if !opts[:'time_step'].nil?
      query_params[:'assetId'] = opts[:'asset_id'] if !opts[:'asset_id'].nil?
      query_params[:'streamId'] = opts[:'stream_id'] if !opts[:'stream_id'].nil?
      query_params[:'creatorId'] = opts[:'creator_id'] if !opts[:'creator_id'].nil?
      query_params[:'breakdownBy[]'] = @api_client.build_collection_param(opts[:'breakdown_by'], :multi) if !opts[:'breakdown_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ViewershipMetric>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_creator_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_creator_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a multistream target
    # @param id [String] ID of the multistream target
    # @param [Hash] opts the optional parameters
    # @return [MultistreamTarget]
    def get_multistream_target(id, opts = {})
      data, _status_code, _headers = get_multistream_target_with_http_info(id, opts)
      data
    end

    # Retrieve a multistream target
    # @param id [String] ID of the multistream target
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultistreamTarget, Integer, Hash)>] MultistreamTarget data, response status code and response headers
    def get_multistream_target_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_multistream_target ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_multistream_target"
      end
      # resource path
      local_var_path = '/multistream/target/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MultistreamTarget'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_multistream_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_multistream_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Multistream Targets
    # @param [Hash] opts the optional parameters
    # @return [Array<MultistreamTarget>]
    def get_multistream_targets(opts = {})
      data, _status_code, _headers = get_multistream_targets_with_http_info(opts)
      data
    end

    # Retrieve Multistream Targets
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MultistreamTarget>, Integer, Hash)>] Array<MultistreamTarget> data, response status code and response headers
    def get_multistream_targets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_multistream_targets ...'
      end
      # resource path
      local_var_path = '/multistream/target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MultistreamTarget>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_multistream_targets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_multistream_targets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Playback Info
    # @param id [String] The ID of the playback
    # @param [Hash] opts the optional parameters
    # @return [PlaybackInfo]
    def get_playback_info(id, opts = {})
      data, _status_code, _headers = get_playback_info_with_http_info(id, opts)
      data
    end

    # Retrieve Playback Info
    # @param id [String] The ID of the playback
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlaybackInfo, Integer, Hash)>] PlaybackInfo data, response status code and response headers
    def get_playback_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_playback_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_playback_info"
      end
      # resource path
      local_var_path = '/playback/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlaybackInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_playback_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_playback_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query public total views metrics
    # @param playback_id [String] The playback ID to filter the query results. This can be a canonical playback ID from Livepeer assets or streams, or dStorage identifiers for assets 
    # @param [Hash] opts the optional parameters
    # @return [GetPublicTotalViewsMetrics200Response]
    def get_public_total_views_metrics(playback_id, opts = {})
      data, _status_code, _headers = get_public_total_views_metrics_with_http_info(playback_id, opts)
      data
    end

    # Query public total views metrics
    # @param playback_id [String] The playback ID to filter the query results. This can be a canonical playback ID from Livepeer assets or streams, or dStorage identifiers for assets 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPublicTotalViewsMetrics200Response, Integer, Hash)>] GetPublicTotalViewsMetrics200Response data, response status code and response headers
    def get_public_total_views_metrics_with_http_info(playback_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_public_total_views_metrics ...'
      end
      # verify the required parameter 'playback_id' is set
      if @api_client.config.client_side_validation && playback_id.nil?
        fail ArgumentError, "Missing the required parameter 'playback_id' when calling DefaultApi.get_public_total_views_metrics"
      end
      # resource path
      local_var_path = '/data/views/query/total/{playbackId}'.sub('{' + 'playbackId' + '}', CGI.escape(playback_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPublicTotalViewsMetrics200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_public_total_views_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_public_total_views_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Recorded Sessions
    # @param parent_id [String] ID of the parent stream
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :record Flag indicating if the response should only include recorded sessions 
    # @return [Array<Session>]
    def get_recorded_sessions(parent_id, opts = {})
      data, _status_code, _headers = get_recorded_sessions_with_http_info(parent_id, opts)
      data
    end

    # Retrieve Recorded Sessions
    # @param parent_id [String] ID of the parent stream
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :record Flag indicating if the response should only include recorded sessions 
    # @return [Array<(Array<Session>, Integer, Hash)>] Array<Session> data, response status code and response headers
    def get_recorded_sessions_with_http_info(parent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_recorded_sessions ...'
      end
      # verify the required parameter 'parent_id' is set
      if @api_client.config.client_side_validation && parent_id.nil?
        fail ArgumentError, "Missing the required parameter 'parent_id' when calling DefaultApi.get_recorded_sessions"
      end
      # resource path
      local_var_path = '/stream/{parentId}/sessions'.sub('{' + 'parentId' + '}', CGI.escape(parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'record'] = opts[:'record'] if !opts[:'record'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Session>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_recorded_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_recorded_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a room
    # @param id [String] ID of the room
    # @param [Hash] opts the optional parameters
    # @return [Room]
    def get_room(id, opts = {})
      data, _status_code, _headers = get_room_with_http_info(id, opts)
      data
    end

    # Retrieve a room
    # @param id [String] ID of the room
    # @param [Hash] opts the optional parameters
    # @return [Array<(Room, Integer, Hash)>] Room data, response status code and response headers
    def get_room_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_room ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_room"
      end
      # resource path
      local_var_path = '/room/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Room'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_room",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user details
    # @param id [String] ID of the room
    # @param user_id [String] ID of the user
    # @param [Hash] opts the optional parameters
    # @return [GetRoomUserResponse]
    def get_room_user_details(id, user_id, opts = {})
      data, _status_code, _headers = get_room_user_details_with_http_info(id, user_id, opts)
      data
    end

    # Get user details
    # @param id [String] ID of the room
    # @param user_id [String] ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRoomUserResponse, Integer, Hash)>] GetRoomUserResponse data, response status code and response headers
    def get_room_user_details_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_room_user_details ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_room_user_details"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_room_user_details"
      end
      # resource path
      local_var_path = '/room/{id}/user/{userId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRoomUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_room_user_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_room_user_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a session
    # @param id [String] ID of the session
    # @param [Hash] opts the optional parameters
    # @return [Session]
    def get_session(id, opts = {})
      data, _status_code, _headers = get_session_with_http_info(id, opts)
      data
    end

    # Retrieve a session
    # @param id [String] ID of the session
    # @param [Hash] opts the optional parameters
    # @return [Array<(Session, Integer, Hash)>] Session data, response status code and response headers
    def get_session_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_session ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_session"
      end
      # resource path
      local_var_path = '/session/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Session'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve sessions
    # @param [Hash] opts the optional parameters
    # @return [Array<Session>]
    def get_sessions(opts = {})
      data, _status_code, _headers = get_sessions_with_http_info(opts)
      data
    end

    # Retrieve sessions
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Session>, Integer, Hash)>] Array<Session> data, response status code and response headers
    def get_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_sessions ...'
      end
      # resource path
      local_var_path = '/session'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Session>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a signing key
    # @param key_id [String] ID of the signing key
    # @param [Hash] opts the optional parameters
    # @return [SigningKey]
    def get_signing_key(key_id, opts = {})
      data, _status_code, _headers = get_signing_key_with_http_info(key_id, opts)
      data
    end

    # Retrieves a signing key
    # @param key_id [String] ID of the signing key
    # @param [Hash] opts the optional parameters
    # @return [Array<(SigningKey, Integer, Hash)>] SigningKey data, response status code and response headers
    def get_signing_key_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_signing_key ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling DefaultApi.get_signing_key"
      end
      # resource path
      local_var_path = '/access-control/signing-key/{keyId}'.sub('{' + 'keyId' + '}', CGI.escape(key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SigningKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_signing_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_signing_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves signing keys
    # @param [Hash] opts the optional parameters
    # @return [Array<SigningKey>]
    def get_signing_keys(opts = {})
      data, _status_code, _headers = get_signing_keys_with_http_info(opts)
      data
    end

    # Retrieves signing keys
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SigningKey>, Integer, Hash)>] Array<SigningKey> data, response status code and response headers
    def get_signing_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_signing_keys ...'
      end
      # resource path
      local_var_path = '/access-control/signing-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SigningKey>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_signing_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_signing_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a stream
    # @param id [String] ID of the stream
    # @param [Hash] opts the optional parameters
    # @return [Stream]
    def get_stream(id, opts = {})
      data, _status_code, _headers = get_stream_with_http_info(id, opts)
      data
    end

    # Retrieve a stream
    # @param id [String] ID of the stream
    # @param [Hash] opts the optional parameters
    # @return [Array<(Stream, Integer, Hash)>] Stream data, response status code and response headers
    def get_stream_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_stream ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_stream"
      end
      # resource path
      local_var_path = '/stream/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Stream'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_stream",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve streams
    # @param [Hash] opts the optional parameters
    # @option opts [String] :streamsonly Filter the API response and retrieve a specific subset of stream objects based on certain criteria
    # @return [Array<Stream>]
    def get_streams(opts = {})
      data, _status_code, _headers = get_streams_with_http_info(opts)
      data
    end

    # Retrieve streams
    # @param [Hash] opts the optional parameters
    # @option opts [String] :streamsonly Filter the API response and retrieve a specific subset of stream objects based on certain criteria
    # @return [Array<(Array<Stream>, Integer, Hash)>] Array<Stream> data, response status code and response headers
    def get_streams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_streams ...'
      end
      # resource path
      local_var_path = '/stream'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'streamsonly'] = opts[:'streamsonly'] if !opts[:'streamsonly'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Stream>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_streams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_streams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Task
    # @param task_id [String] ID of the task
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def get_task(task_id, opts = {})
      data, _status_code, _headers = get_task_with_http_info(task_id, opts)
      data
    end

    # Retrieve a Task
    # @param task_id [String] ID of the task
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def get_task_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_task ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.get_task"
      end
      # resource path
      local_var_path = '/task/{taskId}'.sub('{' + 'taskId' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Tasks
    # @param [Hash] opts the optional parameters
    # @return [Array<Task>]
    def get_tasks(opts = {})
      data, _status_code, _headers = get_tasks_with_http_info(opts)
      data
    end

    # Retrieve Tasks
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Task>, Integer, Hash)>] Array<Task> data, response status code and response headers
    def get_tasks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_tasks ...'
      end
      # resource path
      local_var_path = '/task'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Task>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_tasks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query usage metrics
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from Start millis timestamp for the query range (inclusive) 
    # @option opts [Integer] :to End millis timestamp for the query range (exclusive) 
    # @option opts [String] :time_step The time step to aggregate viewership metrics by 
    # @option opts [String] :creator_id The creator ID to filter the query results 
    # @return [UsageMetric]
    def get_usage_metrics(opts = {})
      data, _status_code, _headers = get_usage_metrics_with_http_info(opts)
      data
    end

    # Query usage metrics
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from Start millis timestamp for the query range (inclusive) 
    # @option opts [Integer] :to End millis timestamp for the query range (exclusive) 
    # @option opts [String] :time_step The time step to aggregate viewership metrics by 
    # @option opts [String] :creator_id The creator ID to filter the query results 
    # @return [Array<(UsageMetric, Integer, Hash)>] UsageMetric data, response status code and response headers
    def get_usage_metrics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_usage_metrics ...'
      end
      allowable_values = ["hour", "day"]
      if @api_client.config.client_side_validation && opts[:'time_step'] && !allowable_values.include?(opts[:'time_step'])
        fail ArgumentError, "invalid value for \"time_step\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/data/usage/query'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'timeStep'] = opts[:'time_step'] if !opts[:'time_step'].nil?
      query_params[:'creatorId'] = opts[:'creator_id'] if !opts[:'creator_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsageMetric'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_usage_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_usage_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query viewership metrics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :playback_id The playback ID to filter the query results. This can be a canonical playback ID from Livepeer assets or streams, or dStorage identifiers for assets 
    # @option opts [GetViewershipsMetricsFromParameter] :from Start timestamp for the query range (inclusive)
    # @option opts [GetViewershipsMetricsFromParameter] :to End timestamp for the query range (exclusive)
    # @option opts [String] :time_step The time step to aggregate viewership metrics by
    # @option opts [String] :asset_id The asset ID to filter metrics for
    # @option opts [String] :stream_id The stream ID to filter metrics for
    # @option opts [String] :creator_id The creator ID to filter the query results
    # @option opts [Array<String>] :breakdown_by The list of fields to break down the query results. Specify this query-string multiple times to break down by multiple fields. 
    # @return [Array<ViewershipMetric>]
    def get_viewerships_metrics(opts = {})
      data, _status_code, _headers = get_viewerships_metrics_with_http_info(opts)
      data
    end

    # Query viewership metrics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :playback_id The playback ID to filter the query results. This can be a canonical playback ID from Livepeer assets or streams, or dStorage identifiers for assets 
    # @option opts [GetViewershipsMetricsFromParameter] :from Start timestamp for the query range (inclusive)
    # @option opts [GetViewershipsMetricsFromParameter] :to End timestamp for the query range (exclusive)
    # @option opts [String] :time_step The time step to aggregate viewership metrics by
    # @option opts [String] :asset_id The asset ID to filter metrics for
    # @option opts [String] :stream_id The stream ID to filter metrics for
    # @option opts [String] :creator_id The creator ID to filter the query results
    # @option opts [Array<String>] :breakdown_by The list of fields to break down the query results. Specify this query-string multiple times to break down by multiple fields. 
    # @return [Array<(Array<ViewershipMetric>, Integer, Hash)>] Array<ViewershipMetric> data, response status code and response headers
    def get_viewerships_metrics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_viewerships_metrics ...'
      end
      allowable_values = ["hour", "day", "week", "month", "year"]
      if @api_client.config.client_side_validation && opts[:'time_step'] && !allowable_values.include?(opts[:'time_step'])
        fail ArgumentError, "invalid value for \"time_step\", must be one of #{allowable_values}"
      end
      allowable_values = ["playbackId", "deviceType", "device", "cpu", "os", "browser", "browserEngine", "continent", "country", "subdivision", "timezone", "geohash", "viewerId", "creatorId"]
      if @api_client.config.client_side_validation && opts[:'breakdown_by'] && !opts[:'breakdown_by'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"breakdown_by\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/data/views/query'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'playbackId'] = opts[:'playback_id'] if !opts[:'playback_id'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'timeStep'] = opts[:'time_step'] if !opts[:'time_step'].nil?
      query_params[:'assetId'] = opts[:'asset_id'] if !opts[:'asset_id'].nil?
      query_params[:'streamId'] = opts[:'stream_id'] if !opts[:'stream_id'].nil?
      query_params[:'creatorId'] = opts[:'creator_id'] if !opts[:'creator_id'].nil?
      query_params[:'breakdownBy[]'] = @api_client.build_collection_param(opts[:'breakdown_by'], :multi) if !opts[:'breakdown_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ViewershipMetric>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_viewerships_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_viewerships_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a webhook
    # @param id [String] ID of the webhook
    # @param [Hash] opts the optional parameters
    # @return [Webhook]
    def get_webhook(id, opts = {})
      data, _status_code, _headers = get_webhook_with_http_info(id, opts)
      data
    end

    # Retrieve a webhook
    # @param id [String] ID of the webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<(Webhook, Integer, Hash)>] Webhook data, response status code and response headers
    def get_webhook_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_webhook ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_webhook"
      end
      # resource path
      local_var_path = '/webhook/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Webhook'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<Webhook>]
    def get_webhooks(opts = {})
      data, _status_code, _headers = get_webhooks_with_http_info(opts)
      data
    end

    # Retrieve a Webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Webhook>, Integer, Hash)>] Array<Webhook> data, response status code and response headers
    def get_webhooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_webhooks ...'
      end
      # resource path
      local_var_path = '/webhook'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Webhook>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_webhooks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload an asset
    # @param new_asset_payload [NewAssetPayload] 
    # @param [Hash] opts the optional parameters
    # @return [RequestUpload200Response]
    def request_upload(new_asset_payload, opts = {})
      data, _status_code, _headers = request_upload_with_http_info(new_asset_payload, opts)
      data
    end

    # Upload an asset
    # @param new_asset_payload [NewAssetPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RequestUpload200Response, Integer, Hash)>] RequestUpload200Response data, response status code and response headers
    def request_upload_with_http_info(new_asset_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_upload ...'
      end
      # verify the required parameter 'new_asset_payload' is set
      if @api_client.config.client_side_validation && new_asset_payload.nil?
        fail ArgumentError, "Missing the required parameter 'new_asset_payload' when calling DefaultApi.request_upload"
      end
      # resource path
      local_var_path = '/asset/request-upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_asset_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'RequestUpload200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.request_upload",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start room RTMP egress
    # @param id [String] ID of the room
    # @param room_egress_payload [RoomEgressPayload] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_room_egress(id, room_egress_payload, opts = {})
      start_room_egress_with_http_info(id, room_egress_payload, opts)
      nil
    end

    # Start room RTMP egress
    # @param id [String] ID of the room
    # @param room_egress_payload [RoomEgressPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def start_room_egress_with_http_info(id, room_egress_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.start_room_egress ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.start_room_egress"
      end
      # verify the required parameter 'room_egress_payload' is set
      if @api_client.config.client_side_validation && room_egress_payload.nil?
        fail ArgumentError, "Missing the required parameter 'room_egress_payload' when calling DefaultApi.start_room_egress"
      end
      # resource path
      local_var_path = '/room/{id}/egress'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(room_egress_payload)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.start_room_egress",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#start_room_egress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop room RTMP egress
    # @param id [String] ID of the room
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stop_room_egress(id, opts = {})
      stop_room_egress_with_http_info(id, opts)
      nil
    end

    # Stop room RTMP egress
    # @param id [String] ID of the room
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stop_room_egress_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stop_room_egress ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.stop_room_egress"
      end
      # resource path
      local_var_path = '/room/{id}/egress'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.stop_room_egress",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stop_room_egress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transcode a video
    # @param task [Task] 
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def transcode(task, opts = {})
      data, _status_code, _headers = transcode_with_http_info(task, opts)
      data
    end

    # Transcode a video
    # @param task [Task] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def transcode_with_http_info(task, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transcode ...'
      end
      # verify the required parameter 'task' is set
      if @api_client.config.client_side_validation && task.nil?
        fail ArgumentError, "Missing the required parameter 'task' when calling DefaultApi.transcode"
      end
      # resource path
      local_var_path = '/transcode'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(task)

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.transcode",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Multistream Target
    # @param id [String] ID of the multistream target
    # @param body [MultistreamTarget] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_multistream_target(id, body, opts = {})
      update_multistream_target_with_http_info(id, body, opts)
      nil
    end

    # Update Multistream Target
    # @param id [String] ID of the multistream target
    # @param body [MultistreamTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_multistream_target_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_multistream_target ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_multistream_target"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.update_multistream_target"
      end
      # resource path
      local_var_path = '/multistream/target/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_multistream_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_multistream_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a room user
    # @param id [String] ID of the room
    # @param user_id [String] ID of the user
    # @param room_user_update_payload [RoomUserUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_room_user_details(id, user_id, room_user_update_payload, opts = {})
      update_room_user_details_with_http_info(id, user_id, room_user_update_payload, opts)
      nil
    end

    # Update a room user
    # @param id [String] ID of the room
    # @param user_id [String] ID of the user
    # @param room_user_update_payload [RoomUserUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_room_user_details_with_http_info(id, user_id, room_user_update_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_room_user_details ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_room_user_details"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.update_room_user_details"
      end
      # verify the required parameter 'room_user_update_payload' is set
      if @api_client.config.client_side_validation && room_user_update_payload.nil?
        fail ArgumentError, "Missing the required parameter 'room_user_update_payload' when calling DefaultApi.update_room_user_details"
      end
      # resource path
      local_var_path = '/room/{id}/user/{userId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(room_user_update_payload)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_room_user_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_room_user_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a signing key
    # @param key_id [String] ID of the signing key
    # @param update_signing_key_request [UpdateSigningKeyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_signing_key(key_id, update_signing_key_request, opts = {})
      update_signing_key_with_http_info(key_id, update_signing_key_request, opts)
      nil
    end

    # Update a signing key
    # @param key_id [String] ID of the signing key
    # @param update_signing_key_request [UpdateSigningKeyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_signing_key_with_http_info(key_id, update_signing_key_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_signing_key ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling DefaultApi.update_signing_key"
      end
      # verify the required parameter 'update_signing_key_request' is set
      if @api_client.config.client_side_validation && update_signing_key_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_signing_key_request' when calling DefaultApi.update_signing_key"
      end
      # resource path
      local_var_path = '/access-control/signing-key/{keyId}'.sub('{' + 'keyId' + '}', CGI.escape(key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_signing_key_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_signing_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_signing_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a stream
    # @param id [String] ID of the stream
    # @param stream_patch_payload [StreamPatchPayload] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_stream(id, stream_patch_payload, opts = {})
      update_stream_with_http_info(id, stream_patch_payload, opts)
      nil
    end

    # Update a stream
    # @param id [String] ID of the stream
    # @param stream_patch_payload [StreamPatchPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_stream_with_http_info(id, stream_patch_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_stream ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_stream"
      end
      # verify the required parameter 'stream_patch_payload' is set
      if @api_client.config.client_side_validation && stream_patch_payload.nil?
        fail ArgumentError, "Missing the required parameter 'stream_patch_payload' when calling DefaultApi.update_stream"
      end
      # resource path
      local_var_path = '/stream/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(stream_patch_payload)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_stream",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a webhook
    # @param id [String] ID of the webhook
    # @param [Hash] opts the optional parameters
    # @return [Webhook]
    def update_webhook(id, opts = {})
      data, _status_code, _headers = update_webhook_with_http_info(id, opts)
      data
    end

    # Update a webhook
    # @param id [String] ID of the webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<(Webhook, Integer, Hash)>] Webhook data, response status code and response headers
    def update_webhook_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_webhook ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_webhook"
      end
      # resource path
      local_var_path = '/webhook/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Webhook'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload asset via URL
    # @param new_asset_payload [NewAssetPayload] 
    # @param [Hash] opts the optional parameters
    # @return [UploadAssetViaURL200Response]
    def upload_asset_via_url(new_asset_payload, opts = {})
      data, _status_code, _headers = upload_asset_via_url_with_http_info(new_asset_payload, opts)
      data
    end

    # Upload asset via URL
    # @param new_asset_payload [NewAssetPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadAssetViaURL200Response, Integer, Hash)>] UploadAssetViaURL200Response data, response status code and response headers
    def upload_asset_via_url_with_http_info(new_asset_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upload_asset_via_url ...'
      end
      # verify the required parameter 'new_asset_payload' is set
      if @api_client.config.client_side_validation && new_asset_payload.nil?
        fail ArgumentError, "Missing the required parameter 'new_asset_payload' when calling DefaultApi.upload_asset_via_url"
      end
      # resource path
      local_var_path = '/asset/upload/url'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_asset_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'UploadAssetViaURL200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"DefaultApi.upload_asset_via_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload_asset_via_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
